classdef Dataset < dynamicprops
    %DATASET Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        
        full_name
        dataset_name
        markers
        markers_list
        block_idx
        block_names
        data
        cfg
        
    end
    
    methods
        
        function obj = Dataset( varargin )
            
            fclose( 'all' );
            command = '' ;
            if ( nargin > 0 )
                
                opts = struct ( 'paths' , [] , 'marker' , [] , 'cfg' , [] ) ;
                [ opts  ] = parseOpts( opts , varargin );
                opts2var
                clear('functions')
                
                counter=1;
                
                cfg.trialdef.eventvalue=marker;
                
                for i=1:length(paths)
                    
                    flag='good';
                    
                    cfg.dataset=paths{i};
                    
                    try trial_cfg=ft_definetrial(cfg);
                    catch err
                        flag='bad';
                    end
                    
                    if (~strcmp(flag,'bad'))
                        
                        data{counter}=ft_preprocessing(trial_cfg);
                        
                        if (isfield( cfg,'artifacts') & strcmp(cfg.artifacts.threshold.flag,'yes'))
                            trial_cfg.artfctdef.threshold.min = cfg.artifacts.threshold.min;
                            trial_cfg.artfctdef.threshold.max = cfg.artifacts.threshold.max;
                            trial_cfg.artfctdef.threshold.bpfilter = cfg.artifacts.threshold.bpfilter;
                            
                            [trial_cfg, artifact] = ft_artifact_threshold(trial_cfg,data{counter});
                            trial_cfg.artfctdef.threshold.artifact=artifact;
                            data{counter}=ft_rejectartifact(trial_cfg,data{counter});
                        end
                        
                        trial_cfg.resamplefs=250;
                        data{counter}=ft_resampledata(trial_cfg,data{counter});
                        
                        command=strcat(command,',','data{',num2str(counter),'}');
                        
                        temp2 = paths{i};
                        temp3 = regexp( temp2 , '/' ) ;
                        temp2( 1 : temp3( end ) ) = [] ;
                        obj.block_names{ counter } = temp2;
                        counter = counter+1 ;
                        %data=ft_preprocessing(cfg);
                        %measurement(counter).data=data;
                        %measurement(counter).markers=data.trialinfo;
                        %counter=counter+0;
                        
                    end
                    
                end
                
                if (length(data)>1)
                    
                    eval ( [ 'alldata = ft_appenddata( []' , command , ');' ] );
                    obj.data = alldata;
                    obj.markers = obj.data.trialinfo;
                    obj.markers_list = unique( obj.markers );
                    
                    temp = 0 ;
                    for i = 1 : numel( obj.data.cfg.previous )
                        if ( i==1 )
                            try
                                temp=size(obj.data.cfg.previous{1}.artfctdef.threshold.trl(:,4),1)-size(obj.data.cfg.previous{1}.artfctdef.threshold.artifact(:,2),1);
                            catch err
                                temp=size(obj.data.cfg.previous{1}.artfctdef.threshold.trl(:,4),1);
                            end
                            obj.block_idx{ i } = 1 : temp ;
                            
                        else
                            try
                                temp = temp + size(obj.data.cfg.previous{i-1}.artfctdef.threshold.trl(:,4),1)-size(obj.data.cfg.previous{i-1}.artfctdef.threshold.artifact(:,2),1);
                                temp2 = size(obj.data.cfg.previous{i}.artfctdef.threshold.trl(:,4),1)-size(obj.data.cfg.previous{i}.artfctdef.threshold.artifact(:,2),1);
                            catch err
                                temp = temp + size(obj.data.cfg.previous{i-1}.artfctdef.threshold.trl(:,4),1);
                                temp2 = size(obj.data.cfg.previous{i}.artfctdef.threshold.trl(:,4),1);
                            end
                            obj.block_idx{ i } = temp + 1 : temp + temp2;
                        end
                        
                    end
                    
                    obj.cfg=trial_cfg;
                    
                else
                    
                    obj.data = data{1};
                    obj.markers = data{1}.trialinfo;
                    obj.markers_list = unique(obj.markers);
                    obj.cfg=trial_cfg;
<<<<<<< .mine
                    obj.block_idx{ 1 } = 1 : size(obj.data.cfg.previous{1}.artfctdef.threshold.trl(:,4),1)-size(obj.data.cfg.previous{1}.artfctdef.threshold.artifact(:,2),1);
=======
                    obj.block_idx{ 1 } = 1 : numel(obj.data.cfg.previous.trl(:,4));
>>>>>>> .r5160
                    
                end
                
            end
            
        end
        
        function [dw]=diff_wave(obj,varargin)
            
            opts = struct( ...
                'markers' , [] , ...
                'blocks_in'  , [] , ...
                'channels' , 'all' , ...
                'time' , 'all' , ...
                'difftype' , 'timewave' , ...
                'visualise', 'on') ;
            
            [ opts ] = parseOpts( opts , varargin ) ;
            opts2var
            blocks=1:numel(obj.block_idx);
            blocks_out=setdiff(blocks,blocks_in);
            
            if ( strcmp( channels, 'all' ) )
                channels = 1:numel(obj.data.label);
            end
            if ( strcmp( time, 'all' ) )
                time = 1:numel(obj.data.time{1});
            end
            classlength = zeros( size( markers , 1 ) , 1 ) ;
            
            for i = 1 : size( markers , 1 )
                
                for j = 1 : numel( markers{ i } )
                    
                    indices{ i , j } = find( obj.markers == markers{ i }{ j } ) ;
                    
                    for k=1:numel(blocks_out)
                        
                        indices{i}=setdiff(indices{i},obj.block_idx{blocks_out(k)});
                        
                    end
                    
                    classlength( i ) = classlength( i ) + numel( indices{ i , j } ) ;
                    
                end
                
            end
            
            sprintf('Class 1 length: %d \nClass 2 length: %d ',classlength(1),classlength(2))
            indices=indices(:);
            indices=indices';
            indices=cell2mat(indices);
            
            cfg.channel=channels;
            for i=1:size(markers,1);
                cfg.trials = indices(1:classlength(i));
                indices(1:classlength(i))=[];
                wave{i}=ft_timelockanalysis(cfg,obj.data);
            end
            if (strcmp(difftype,'timewave'))
                if (numel(cfg.channel)>1)
                    dw=mean(wave{1}.avg)-mean(wave{2}.avg);
                else dw=wave{1}.avg-wave{2}.avg;
                end
            elseif (strcmp(difftype,'spacewave'))
                if (numel(cfg.channel)>1)
                    dw=mean(wave{1}.avg')-mean(wave{2}.avg');
                else fprintf('not enough channels,exiting');
                    return;
                end
            end
            
            if (strcmp(difftype,'timewave'))
                dw=dw(time);
                
            elseif (strcmp(difftype,'spacewave'))
                dw=dw(channels);
                
            end
               
        if (strcmp(visualise,'on'))
            if (strcmp(difftype,'timewave'))                
                figure,plot(time/obj.data.fsample,dw)
            elseif (strcmp(difftype,'spacewave'))             
                figure,plot(dw)
            end
        end
        %  temp=['marker1:' num2str(markers{1}) ' and marker:' num2str(markers{2})];
        % title(temp);
        
    end
    
    
    function plot(obj,varargin)
    
    opts = struct( ...
        'marker' , [] , ...
        'method' , 'avg' , ...
        'save2disk' , 'no' , ...
        'filename' , 'undefined' , ...
        'blocks_in'  , [] , ...
        'channels' , 'all' , ...
        'time' , 'all' ) ;
    
    [ opts ] = parseOpts( opts , varargin ) ;
    opts2var
    blocks=1:numel(obj.block_idx);
    blocks_out=setdiff(blocks,blocks_in);
    
    if (strcmp(method,'avg'))
        
        cfg.channel=channels;
        
        indices = find( obj.markers == marker) ;
        for k=1:numel(blocks_out)
            
            indices=setdiff(indices,obj.block_idx{blocks_out(k)});
            
        end
        
        if (isempty(indices))
            fprintf('No trials found!!!');
            return;
        end;
        
        cfg.trials=indices;
        
        var=ft_timelockanalysis(cfg,obj.data);
        figure,ft_singleplotER(cfg,var);
        
        if (strcmp(save2disk,'yes'))
            
            saveaspdf(gcf,[filename num2str(marker)],'closef')
            
        end;
        
    elseif (strcmp(method,'multi'))
        
        cfg.layout='EEG1010.lay';
        var=ft_timelockanalysis([],obj.data);
        figure,ft_multiplotER(cfg,var);
        
    elseif (strcmp(method,'diff'))
        
        figure,plot(obj.data.diff.waves);
        
    end
    
    
    end
    
    function new = copy(this)
    % Instantiate new object of the same class.
    new = feval(class(this));
    
    % Copy all non-hidden properties.
    p = properties(this);
    for i = 1:length(p)
        new.(p{i}) = this.(p{i});
    end
    end
    
end

end

