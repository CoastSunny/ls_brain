run('EO_boundary');
data_path = '~/Boundary_Shifting/extracted_data/bound_exp_bp/';
output_path = '~/Boundary_Shifting/results/classification/cross_pp/';

subjects = { 'Daphne' 'Julia' 'Sucty' 'Leora' 'Loek' 'Dominiek' 'Chris' 'Sacha' 'Renout' 'Roel'};
n = numel(subjects);

classification_rates_ctrl = zeros(n, 12);
classification_rates_exp = zeros(n, 12);

Allchannels = [1:64];
channelsgood = Allchannels;
close all;
time = [1:64];
t = time/128;

blocks_8_74 = [1:3 7:9];
blocks_8_41 = [1:6];
blocks_41_74 = [4:9];

DO_FOLDS = 0;

g=Group;
for i=1:n
    propname = ['sub' num2str(i)];
    g.addprop(propname);
    load([data_path subjects{i}]);
    g.(propname) = SUB.copy;
    clear SUB;
end

if (DO_FOLDS)
    for sub=1:n % leave one participant out
        % combine the rest into a group
        delete(findprop(g,'all'))
        g.combine_subjects('exclusion',['sub' num2str(sub)]);
        q = g.all.default.copy;

        %now load the paria
        load([data_path subjects{sub}]);
        su = SUB.default.copy;
        clear SUB;

        blocks_8_41_74 = [];
        blocks_41_8_74 = [];
        blocks_74_41_8 = [];
        for i=1:numel(q.block_idx)
            markers = q.markers(q.block_idx{i})';
            if (numel(find(markers == sb_d1_8msVOT{1}))>0)
                len = numel(blocks_8_41_74);
                blocks_8_41_74(len+1) = i;
            elseif (numel(find(markers == sb_d1_41msVOT{1}))>0)
                len = numel(blocks_41_8_74);
                blocks_41_8_74(len+1) = i;
            elseif (numel(find(markers == sb_d1_74msVOT{1}))>0)
                len = numel(blocks_74_41_8);
                blocks_74_41_8(len+1) = i;
            end
        end

        %settings

        out = q.train_classifier('classes',{d_74msVOT; sb_d2_74msVOT},'blocks_in',[blocks_8_41_74 blocks_74_41_8],'name','74in8-74','channels',channelsgood, 'time', time, 'vis', 'off', 'freqband' , [1 20]);
        validation_rates(sub,1) = out.rate;
        train_fG{:,sub,1} = out.f;
        train_lG{:,sub,1} = out.labels;
        temp = '74in8-74';
        clsfr(sub).('vot74in8_74') = q.(temp);

        out = q.train_classifier('classes',{d_8msVOT; sb_d2_8msVOT},'blocks_in',[blocks_8_41_74 blocks_74_41_8],'name','8in8-74','channels',channelsgood, 'time', time, 'vis', 'off', 'freqband' , [1 20]);
        validation_rates(sub,2) = out.rate;
        train_fG{:,sub,2} = out.f;
        train_lG{:,sub,2} = out.labels;
        temp = '8in8-74';
        clsfr(sub).('vot8in8_74') = q.(temp);

        %let's classify the paria now

        out = q.apply_classifier(su,'classes',{sb_d1_8msVOT}, 'blocks_in', blocks_8_41, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
        classification_ratesG(sub,1) = out.rate;
        test_fG{:,sub,1} = out.f;

        out = q.apply_classifier(su,'classes',{d_41msVOT}, 'blocks_in', blocks_8_41, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
        classification_ratesG(sub,2) = out.rate;
        test_fG{:,sub,2} = out.f;

        out = q.apply_classifier(su,'classes',{sb_d1_41msVOT}, 'blocks_in', blocks_8_41, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
        classification_ratesG(sub,3) = out.rate;
        test_fG{:,sub,3} = out.f;

        out = q.apply_classifier(su,'classes',{d_8msVOT}, 'blocks_in', blocks_8_41, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
        classification_ratesG(sub,4) = out.rate;
        test_fG{:,sub,4} = out.f;

        out = q.apply_classifier(su,'classes',{sb_d2_41msVOT}, 'blocks_in', blocks_41_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
        classification_ratesG(sub,5) = out.rate;
        test_fG{:,sub,5} = out.f;

        out = q.apply_classifier(su,'classes',{d_74msVOT}, 'blocks_in', blocks_41_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
        classification_ratesG(sub,6) = out.rate;
        test_fG{:,sub,6} = out.f;

        out = q.apply_classifier(su,'classes',{sb_d1_74msVOT}, 'blocks_in', blocks_41_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
        classification_ratesG(sub,7) = out.rate;
        test_fG{:,sub,7} = out.f;

        out = q.apply_classifier(su,'classes',{d_41msVOT}, 'blocks_in', blocks_41_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
        classification_ratesG(sub,8) = out.rate;
        test_fG{:,sub,8} = out.f;

        out = q.apply_classifier(su,'classes',{sb_d2_8msVOT}, 'blocks_in', blocks_8_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
        classification_ratesG(sub,9) = out.rate;
        test_fG{:,sub,9} = out.f;

        out = q.apply_classifier(su,'classes',{d_74msVOT}, 'blocks_in', blocks_8_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
        classification_ratesG(sub,10) = out.rate;
        test_fG{:,sub,10} = out.f;

        out = q.apply_classifier(su,'classes',{sb_d2_74msVOT}, 'blocks_in', blocks_8_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
        classification_ratesG(sub,11) = out.rate;
        test_fG{:,sub,11} = out.f;

        out = q.apply_classifier(su,'classes',{d_8msVOT}, 'blocks_in', blocks_8_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
        classification_ratesG(sub,12) = out.rate;
        test_fG{:,sub,12} = out.f;

    end
    save([output_path 'cross_pp_folds.mat'], 'clsfr', 'classification_ratesG', 'test_fG', 'train_fG', 'train_lG');
else
    
    %let's combine data from all individuals
    g.combine_subjects;
    q = g.all.default.copy;

    blocks_8_41_74 = [];
    blocks_41_8_74 = [];
    blocks_74_41_8 = [];
    for i=1:numel(q.block_idx)
        markers = q.markers(q.block_idx{i})';
        if (numel(find(markers == sb_d1_8msVOT{1}))>0)
            len = numel(blocks_8_41_74);
            blocks_8_41_74(len+1) = i;
        elseif (numel(find(markers == sb_d1_41msVOT{1}))>0)
            len = numel(blocks_41_8_74);
            blocks_41_8_74(len+1) = i;
        elseif (numel(find(markers == sb_d1_74msVOT{1}))>0)
            len = numel(blocks_74_41_8);
            blocks_74_41_8(len+1) = i;
        end
    end
    
<<<<<<< .mine
    %settings
    
    
    q.train_classifier('classes',{d_74msVOT; sb_d2_74msVOT},'blocks_in',[blocks_8_41_74 blocks_74_41_8],'name','74in8-74','channels',channelsgood, 'time', time, 'vis', 'off', 'freqband' , [1 20]);
    validation_ratesG(sub,1) = out.rate;
    train_fG{:,sub,1} = out.f;
    train_lG{:,sub,1} = out.labels;
    %%save classifier clsfr=S.default.('74in8-74');
    
    q.train_classifier('classes',{d_8msVOT; sb_d2_8msVOT},'blocks_in',[blocks_8_41_74 blocks_74_41_8],'name','8in8-74','channels',channelsgood, 'time', time, 'vis', 'off', 'freqband' , [1 20]);
    validation_ratesG(sub,2) = out.rate;
    train_fG{:,sub,2} = out.f;
    train_lG{:,sub,2} = out.labels;
    %save classifier clsfr=S.default.('8in8-74');
    
    
    %let's classify the paria now
    
    out = q.apply_classifier(su,'classes',{sb_d1_8msVOT}, 'blocks_in', blocks_8_41, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
    classification_ratesG(sub,1) = out.rate;
    test_fG{:,sub,1} = out.f;
    
    
    out = q.apply_classifier(su,'classes',{dev_41msVOT}, 'blocks_in', blocks_8_41, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
    classification_ratesG(sub,2) = out.rate;
    test_fG{:,sub,2} = out.f;
    
    out = q.apply_classifier(su,'classes',{sb_d1_41msVOT}, 'blocks_in', blocks_8_41, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
    classification_ratesG(sub,3) = out.rate;
    test_fG{:,sub,3} = out.f;
    
    out = q.apply_classifier(su,'classes',{dev_8msVOT}, 'blocks_in', blocks_8_41, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
    classification_ratesG(sub,4) = out.rate;
    test_fG{:,sub,4} = out.f;
    
    out = q.apply_classifier(su,'classes',{sb_d2_41msVOT}, 'blocks_in', blocks_41_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
    classification_ratesG(sub,5) = out.rate;
    test_fG{:,sub,5} = out.f;
    
    out = q.apply_classifier(su,'classes',{dev_74msVOT}, 'blocks_in', blocks_41_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
    classification_ratesG(sub,6) = out.rate;
    test_fG{:,sub,6} = out.f;
    
    out = q.apply_classifier(su,'classes',{sb_d1_74msVOT}, 'blocks_in', blocks_41_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
    classification_ratesG(sub,7) = out.rate;
    test_fG{:,sub,7} = out.f;
    
    out = q.apply_classifier(su,'classes',{dev_41msVOT}, 'blocks_in', blocks_41_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
    classification_ratesG(sub,8) = out.rate;
    test_fG{:,sub,8} = out.f;
    
    out = q.apply_classifier(su,'classes',{sb_d2_8msVOT}, 'blocks_in', blocks_8_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
    classification_ratesG(sub,9) = out.rate;
    test_fG{:,sub,9} = out.f;
    
    out = q.apply_classifier(su,'classes',{dev_74msVOT}, 'blocks_in', blocks_8_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
    classification_ratesG(sub,10) = out.rate;
    test_fG{:,sub,10} = out.f;
    
    out = q.apply_classifier(su,'classes',{sb_d2_74msVOT}, 'blocks_in', blocks_8_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
    classification_ratesG(sub,11) = out.rate;
    test_fG{:,sub,11} = out.f;
    
    out = q.apply_classifier(su,'classes',{dev_8msVOT}, 'blocks_in', blocks_8_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
    classification_ratesG(sub,12) = out.rate;
    test_fG{:,sub,12} = out.f;
    
end=======
    spatial = {'', 'car', 'whiten' };
    for filt=1:3
        for time_shift = 1:2                %1 is no shift
            rank = 2*(filt-1) + time_shift;
            if (time_shift==2)
                time2 = time + 4;
            else
                time2 = time;
            end
            
            %let's train a classifier on the combined data
            out = q.train_classifier('classes',{d_74msVOT; sb_d2_74msVOT},'blocks_in',[blocks_8_41_74 blocks_74_41_8],'name','74in8-74','channels',channelsgood, 'time', time, 'vis', 'off', ...
                                     'freqband' , [1 20], 'spatialfilter', spatial{filt});
            validation_rates(rank,1) = out.rate;
            train_fG{:,rank,1} = out.f;
            train_lG{:,rank,1} = out.labels;
            temp = '74in8-74';
            clsfr(rank).('vot74in8_74') = q.(temp);

            out = q.train_classifier('classes',{d_8msVOT; sb_d2_8msVOT},'blocks_in',[blocks_8_41_74 blocks_74_41_8],'name','8in8-74','channels',channelsgood, 'time', time, 'vis', 'off', ...
                                     'freqband' , [1 20], 'spatialfilter', spatial{filt});
            validation_rates(rank,2) = out.rate;
            train_fG{:,rank,2} = out.f;
            train_lG{:,rank,2} = out.labels;
            temp = '8in8-74';
            clsfr(rank).('vot8in8_74') = q.(temp);
            
            %let's plot the PC and topoplot of weights now
            clsf = {'vot74in8_74', 'vot8in8_74'};
            cls = { {d_74msVOT; sb_d2_74msVOT};
                    {d_8msVOT; sb_d2_8msVOT} };

            for i=1:2
                name = clsf{i};
                classif = clsfr(rank).(name);
                classes = cls{i};

                W=classif.W;
                [U S V]=svd(W);
                s=diag(S);
                s=s.^2;
                fs=su.data.fsample;
                t=time/fs;
                dw=obj.diff_wave('classes',classes,'blocks_in',[ blocks_8_41_74 blocks_74_41_8 ],'time',time,'vis','off', 'channels', channels);
                %dw=su.diff_wave('classes',classes,'blocks_in',blocks_in,'time',time,'vis','off');

                %PC1
                figure,
                hold on, plot(t,V(:,1),'r'),plot(t,V(:,2),'g'),plot(t,V(:,3),'b'),plot(t,dw/norm(dw),'m');
                title([num2str(s(1)/sum(s)) ' ' num2str(s(2)/sum(s)) ' ' num2str(s(3)/sum(s))]),xlabel('time')
                legend(['PC1 ' 'PC2' 'PC3' num2str(s(1)/sum(s))], 'MMN');    % display the amount of variance explained

                %and its topoplot
                figure;
                electrodelocs = 'cap64.txt'; 
                eloc=readlocs(electrodelocs, 'filetype', 'besa');
                topoplot(U(:,1),eloc);
                legend(num2str(s(1)/sum(s)));

                %reversed PC1
                figure,
                hold on, plot(t,-V(:,1),'r'), plot(t,-V(:,2),'g'), plot(t,-V(:,3),'b'),plot(t,dw/norm(dw),'m');
                title('PC1'),xlabel('time')
                legend(['PC1 ' 'PC2' 'PC3' num2str(s(1)/sum(s))], 'MMN');    % display the amount of variance explained

                %and topoplot for reversed PC1
                figure;
                electrodelocs = 'cap64.txt'; 
                eloc=readlocs(electrodelocs, 'filetype', 'besa');
                topoplot(-U(:,1),eloc);
                legend(num2str(s(1)/sum(s)));
            end

            for k=1:8
                if (mod(k,2))
                    figure(k);
                    plot(t,   0, 'col', [0 0 0]); hold on;
                    plot(t,-0.1, 'col', [0 0 0]); hold on;
                    plot(t,-0.2, 'col', [0 0 0]); hold on;
                    plot([0.15 0.15], [-10 10], 'col', [0 0 0], 'LineStyle', ':'); hold on;
                    plot([0.25 0.25], [-10 10], 'col', [0 0 0], 'LineStyle', ':'); hold on;
                    plot([0.35 0.35], [-10 10], 'col', [0 0 0], 'LineStyle', ':'); hold on;
                    set(gca, 'xlim', [0 0.5]);
                    set(gca, 'ylim', [-0.5 0.5]);
                end
            end
            figmerge([1:8], [4 2]);
            print(9, [output_path 'cross_pp_visual'], '-dpng');
            close all;

            %let's classify the individuals now
            blocks_8_74 = [1:3 7:9];
            blocks_8_41 = [1:6];
            blocks_41_74 = [4:9];

            for sub=1:n
                load([data_path subjects{sub}]);
                su = SUB.default.copy;
                clear SUB;

                out = q.apply_classifier(su,'classes',{sb_d1_8msVOT}, 'blocks_in', blocks_8_41, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
                classification_ratesG(sub,1,rank) = out.rate;
                test_fG{:,sub,1} = out.f;

                out = q.apply_classifier(su,'classes',{d_41msVOT}, 'blocks_in', blocks_8_41, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
                classification_ratesG(sub,2,rank) = out.rate;
                test_fG{:,sub,2} = out.f;

                out = q.apply_classifier(su,'classes',{sb_d1_41msVOT}, 'blocks_in', blocks_8_41, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
                classification_ratesG(sub,3,rank) = out.rate;
                test_fG{:,sub,3} = out.f;

                out = q.apply_classifier(su,'classes',{d_8msVOT}, 'blocks_in', blocks_8_41, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
                classification_ratesG(sub,4,rank) = out.rate;
                test_fG{:,sub,4} = out.f;

                out = q.apply_classifier(su,'classes',{sb_d2_41msVOT}, 'blocks_in', blocks_41_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time2, 'target_labels', [1]);
                classification_ratesG(sub,5,rank) = out.rate;
                test_fG{:,sub,5} = out.f;

                out = q.apply_classifier(su,'classes',{d_74msVOT}, 'blocks_in', blocks_41_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time2, 'target_labels', [1]);
                classification_ratesG(sub,6,rank) = out.rate;
                test_fG{:,sub,6} = out.f;

                out = q.apply_classifier(su,'classes',{sb_d1_74msVOT}, 'blocks_in', blocks_41_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time2, 'target_labels', [1]);
                classification_ratesG(sub,7,rank) = out.rate;
                test_fG{:,sub,7} = out.f;

                out = q.apply_classifier(su,'classes',{d_41msVOT}, 'blocks_in', blocks_41_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time2, 'target_labels', [1]);
                classification_ratesG(sub,8,rank) = out.rate;
                test_fG{:,sub,8} = out.f;

                out = q.apply_classifier(su,'classes',{sb_d2_8msVOT}, 'blocks_in', blocks_8_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
                classification_ratesG(sub,9,rank) = out.rate;
                test_fG{:,sub,9} = out.f;

                out = q.apply_classifier(su,'classes',{d_74msVOT}, 'blocks_in', blocks_8_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
                classification_ratesG(sub,10,rank) = out.rate;
                test_fG{:,sub,10} = out.f;

                out = q.apply_classifier(su,'classes',{sb_d2_74msVOT}, 'blocks_in', blocks_8_74, 'name', '74in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [1]);
                classification_ratesG(sub,11,rank) = out.rate;
                test_fG{:,sub,11} = out.f;

                out = q.apply_classifier(su,'classes',{d_8msVOT}, 'blocks_in', blocks_8_74, 'name', '8in8-74', 'channels', channelsgood, 'time', time, 'target_labels', [-1]);
                classification_ratesG(sub,12,rank) = out.rate;
                test_fG{:,sub,12} = out.f;
            end
            all_test_fG{rank} = test_fG;
        end
    end
    save([output_path 'cross_pp_one_clsfr.mat'], 'clsfr', 'classification_ratesG', 'all_test_fG', 'train_fG', 'train_lG', 'validation_rates');
end
>>>>>>> .r5784
