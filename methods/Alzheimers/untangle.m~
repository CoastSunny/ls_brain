clear M1 M2
max_iter=10;
noise_values=0+(0.05:0.05:1.5);
j=1;
[W1,We1]=wHub(8,8,noise_values(j));
[W2,We2]=wHub(8,8,noise_values(j));
mtype=[];
mtype{1}='trans';
mtype{2}='clust';
mtype{3}='deg';

for i=1:numel(mtype)
    M1{i}=ls_network_metric(W1,mtype{i});
    M2{i}=ls_network_metric(W2,mtype{i});
end

Wm=W1+W2;
% Wm=Wm/max(max(Wm));


R1 = optimise_network_multi(Wm,mtype,M1');
R2 = optimise_network_multi(Wm,mtype,M2');
tmp=[norm(vec(W1-R1)) norm(vec(W2-R2))];
iter=1;
dR1=Inf;dR2=Inf;
while (dR1+dR2>.01 && iter<max_iter)
R1old=R1;
R2old=R2;
tmp=Wm-R2;tmp(tmp<0)=0;tmp(tmp>1)=1;
R1 = optimise_network_multi(tmp,mtype,M1');
tmp=Wm-R1;tmp(tmp<0)=0;tmp(tmp>1)=1;
R2 = optimise_network_multi(tmp,mtype,M2');
dR1=norm(R1-R1old,'fro');
dR2=norm(R2-R2old,'fro');
tmp=[norm(R1-W1,'fro') norm(R2-W2,'fro')];
dR(iter,:)=[dR1 dR2];
E(iter,:)=tmp;
RE(iter,:)=norm(vec(R1+R2-Wm),'fro');
iter=iter+1;
end












































