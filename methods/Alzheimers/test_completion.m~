mtype=[];

clear E1 E2 E3  M1 M2 M3
iters=10;
E1=zeros(2,iters,numel(noise_values));
E2=zeros(2,iters,numel(noise_values));
E3=zeros(2,iters,numel(noise_values));

[bm , mods] = random_modular_graph(32,4,1,.90);
mod_matrix = ind2mod(mods,bm);
for j=1:numel(noise_values)
    for i=1:iters
               
        mtype=[];
        mtype{1}='trans';
        mtype{2}='clust';
        mtype{3}='modul';
        mtype{4}='deg';
        
        for k=1:numel(mtype)
            M{k}=ls_network_metric(W,mtype{k},'modules',mod_matrix,'structure',bm);          
        end
        [b , m , it]=optimise_network_multi(We,mtype,...
            M','modules',mod_matrix,'structure',bm);
        
        tmp2=[norm(W-b,'fro') norm(W-We,'fro')];
        
        M2(:,:,i,j)=[m(1,end) ls_network_metric(W,mtype{1}) ls_network_metric(We,mtype{1});...
            m(2,end) ls_network_metric(W,mtype{2}) ls_network_metric(We,mtype{2});...
            m(3,end) ls_network_metric(W,mtype{3}, 'modules',mod_matrix,'structure',bm)...
            ls_network_metric(We,mtype{3}, 'modules',mod_matrix,'structure',bm)];
        E2(:,i,j)=tmp2;
        RES{i,j}={{W} {We} {a} {b}};
        i
    end
end











